// file: lib/screens/ListVehicles/vehicle_details_screen.dart

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:tool_rental_app/screens/ListVehicles/vehicle_verification_screen.dart';
import 'package:tool_rental_app/screens/Profile/AddressesScreen.dart'; // Import the AddressesScreen
import 'package:tool_rental_app/constants/vehicle.dart'; // Corrected import path

class VehicleDetailsScreen extends StatefulWidget {
  final String category;

  const VehicleDetailsScreen({super.key, required this.category});

  @override
  State<VehicleDetailsScreen> createState() => _VehicleDetailsScreenState();
}

class _VehicleDetailsScreenState extends State<VehicleDetailsScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _makeController = TextEditingController();
  final TextEditingController _modelController = TextEditingController();
  final TextEditingController _yearController = TextEditingController();
  final TextEditingController _licensePlateController = TextEditingController();
  final TextEditingController _mileageController = TextEditingController();
  final TextEditingController _rentController = TextEditingController();
  final TextEditingController _advanceController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();

  bool _isAvailable = true;
  bool _requiresLicense = true;
  String? _selectedAddressId;
  Map<String, dynamic>? _selectedAddressData; // Added to store full address data

  @override
  void dispose() {
    _makeController.dispose();
    _modelController.dispose();
    _yearController.dispose();
    _licensePlateController.dispose();
    _mileageController.dispose();
    _rentController.dispose();
    _advanceController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _navigateToVerification() {
    if (_formKey.currentState!.validate()) {
      if (_selectedAddressId == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please select a saved address.')),
        );
        return;
      }

      final vehicle = Vehicle(
        id: '', // ID is not known yet, will be generated by Firestore
        category: widget.category,
        make: _makeController.text,
        model: _modelController.text,
        year: int.parse(_yearController.text),
        licensePlate: _licensePlateController.text,
        mileage: int.parse(_mileageController.text),
        rentPerDay: double.parse(_rentController.text),
        advanceAmount: double.parse(_advanceController.text),
        description: _descriptionController.text,
        isAvailable: _isAvailable,
        requiresLicense: _requiresLicense,
        // Using address data from the selected dropdown
        address: _selectedAddressData!['addressName'] ?? 'Unnamed Address',
        addressId: _selectedAddressId!,
        locationLink: _selectedAddressData!['location'],
      );

      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => VerificationScreen(vehicle: vehicle),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text("Error"),
          backgroundColor: const Color(0xFF203a43),
          iconTheme: const IconThemeData(color: Colors.white),
        ),
        body: const Center(
          child: Text(
            'You must be logged in to list a vehicle.',
            style: TextStyle(color: Colors.white70),
          ),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(
          "List a ${widget.category}",
          style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
        backgroundColor: const Color(0xFF203a43),
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF0f2027), Color(0xFF203a43), Color(0xFF2c5364)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Column(
          children: [
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: ListView(
                    children: <Widget>[
                      _buildSectionTitle('Vehicle Details'),
                      _buildTextField(
                        controller: _makeController,
                        labelText: 'Make',
                        validator: (value) => value!.isEmpty ? 'Please enter the make' : null,
                      ),
                      _buildTextField(
                        controller: _modelController,
                        labelText: 'Model',
                        validator: (value) => value!.isEmpty ? 'Please enter the model' : null,
                      ),
                      _buildTextField(
                        controller: _yearController,
                        labelText: 'Year',
                        keyboardType: TextInputType.number,
                        validator: (value) => value!.isEmpty || int.tryParse(value) == null ? 'Enter a valid year' : null,
                      ),
                      _buildTextField(
                        controller: _licensePlateController,
                        labelText: 'License Plate Number',
                        validator: (value) => value!.isEmpty ? 'Please enter the license plate' : null,
                      ),
                      _buildTextField(
                        controller: _mileageController,
                        labelText: 'Mileage (km)',
                        keyboardType: TextInputType.number,
                        validator: (value) => value!.isEmpty || int.tryParse(value) == null ? 'Enter a valid mileage' : null,
                      ),
                      _buildTextField(
                        controller: _descriptionController,
                        labelText: 'Description',
                        maxLines: 3,
                        validator: (value) => value!.isEmpty ? 'Please enter a description' : null,
                      ),
                      const SizedBox(height: 20),
                      _buildSectionTitle('Rental Information'),
                      _buildTextField(
                        controller: _rentController,
                        labelText: 'Rent per Day (₹)',
                        keyboardType: TextInputType.number,
                        validator: (value) => value!.isEmpty || double.tryParse(value) == null ? 'Enter a valid price' : null,
                      ),
                      _buildTextField(
                        controller: _advanceController,
                        labelText: 'Advance Amount (₹)',
                        keyboardType: TextInputType.number,
                        validator: (value) => value!.isEmpty || double.tryParse(value) == null ? 'Enter a valid amount' : null,
                      ),
                      _buildSwitchListTile('Available for Rent', _isAvailable, (value) => setState(() => _isAvailable = value)),
                      _buildSwitchListTile('Requires Driving License', _requiresLicense, (value) => setState(() => _requiresLicense = value)),
                      const SizedBox(height: 20),
                      _buildAddressSelection(user.uid), // Updated to use the new method
                    ],
                  ),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: ElevatedButton(
                onPressed: _navigateToVerification,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  backgroundColor: const Color(0xFFEA384D),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text(
                  'Next: Review & Submit',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String labelText,
    TextInputType? keyboardType,
    int maxLines = 1,
    String? Function(String?)? validator,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        keyboardType: keyboardType,
        maxLines: maxLines,
        style: const TextStyle(color: Colors.white),
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: const TextStyle(color: Colors.white70),
          enabledBorder: OutlineInputBorder(borderSide: const BorderSide(color: Colors.white38), borderRadius: BorderRadius.circular(12)),
          focusedBorder: OutlineInputBorder(borderSide: const BorderSide(color: Colors.white), borderRadius: BorderRadius.circular(12)),
          errorBorder: OutlineInputBorder(borderSide: const BorderSide(color: Colors.redAccent), borderRadius: BorderRadius.circular(12)),
          focusedErrorBorder: OutlineInputBorder(borderSide: const BorderSide(color: Colors.red), borderRadius: BorderRadius.circular(12)),
        ),
        validator: validator,
      ),
    );
  }

  Widget _buildSwitchListTile(String title, bool value, ValueChanged<bool> onChanged) {
    return SwitchListTile(
      title: Text(title, style: const TextStyle(color: Colors.white, fontSize: 16)),
      value: value,
      onChanged: onChanged,
      activeColor: const Color(0xFF38ef7d),
      inactiveTrackColor: Colors.white24,
      contentPadding: EdgeInsets.zero,
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10.0),
      child: Text(
        title,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 24,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // The new address selection widget based on the ListPackageScreen
  Widget _buildAddressSelection(String userId) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text("Pickup Address", style: Theme.of(context).textTheme.headlineSmall?.copyWith(color: Colors.white, fontWeight: FontWeight.bold)),
        const Divider(color: Colors.white24, height: 24),
        StreamBuilder<QuerySnapshot>(
          stream: FirebaseFirestore.instance
              .collection('userAddresses')
              .where('ownerId', isEqualTo: userId)
              .snapshots(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator(color: Colors.greenAccent));
            }
            if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}', style: const TextStyle(color: Colors.white)));
            }
            if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: TextButton.icon(
                  onPressed: () {
                    Navigator.of(context).push(MaterialPageRoute(
                      builder: (context) => const AddressesScreen(),
                    ));
                  },
                  icon: const Icon(Icons.add_circle, color: Colors.greenAccent),
                  label: const Text(
                    "No addresses found. Add a new address.",
                    style: TextStyle(color: Colors.white70),
                  ),
                ),
              );
            }

            final addresses = snapshot.data!.docs;
            return DropdownButtonFormField<String>(
              value: _selectedAddressId,
              decoration: InputDecoration(
                labelText: "Select Address",
                labelStyle: const TextStyle(color: Colors.white70),
                prefixIcon: const Icon(Icons.location_on, color: Colors.white70),
                filled: true,
                fillColor: Colors.white.withOpacity(0.1),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide.none,
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: const BorderSide(color: Colors.white10),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: const BorderSide(color: Colors.greenAccent, width: 2.0),
                ),
              ),
              dropdownColor: const Color(0xFF203a43),
              style: const TextStyle(color: Colors.white),
              icon: const Icon(Icons.arrow_drop_down, color: Colors.white70),
              onChanged: (String? newValue) {
                setState(() {
                  _selectedAddressId = newValue;
                  _selectedAddressData = addresses.firstWhere((doc) => doc.id == newValue).data() as Map<String, dynamic>;
                });
              },
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please select an address';
                }
                return null;
              },
              items: addresses.map<DropdownMenuItem<String>>((DocumentSnapshot doc) {
                final data = doc.data() as Map<String, dynamic>;
                return DropdownMenuItem<String>(
                  value: doc.id,
                  child: Text(data['addressName'] ?? 'Unnamed Address'),
                );
              }).toList(),
            );
          },
        ),
        const SizedBox(height: 16),
      ],
    );
  }
}